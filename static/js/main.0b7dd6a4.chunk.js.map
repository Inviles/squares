{"version":3,"sources":["components/PlayingScreen/PlayingScreen.module.scss","components/Square/Square.module.scss","components/PlayingScreen/PlayingScreen.tsx","components/Square/Square.tsx","Graph.ts","Squares.ts","components/Game.tsx","components/SquaresRow.tsx","components/StartScreen/squares_example.png","components/StartScreen/StartScreen.tsx","components/WinnerModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","PlayingScreen","player","makeMove","field","onFinishGame","statistics","cx","classNames","bind","classes","firstPlayerWinningSquares","secondPlayerWinningSquares","Row","className","Col","xs","map","squaresRow","rowIndex","row","onSelectSquare","Button","onClick","Square","columnIndex","handleSelectSquare","useCallback","Boolean","squareClasses","Square_player_first","Square_player_second","Square_state_empty","Graph","adjacencyList","findLongestPath","list","vertecies","Object","keys","visited","longestPath","currentPathLength","depthFirstSearch","vertex","neighbors","hasNeighbors","length","forEach","neighbor","Number","this","firstVertex","secondVertex","push","GAME_HAS_NOT_STARTED","DEFAULT_STATISTICS","1","2","SquaresGame","firstPlayerGraph","secondPlayerGraph","currentPlayerGraph","currentPlayer","remainingNumberOfMoves","start","fieldSize","createArrayFilledWithNulls","Array","fill","rows","Error","selectSquare","updateCurrentGraph","numberOfwinningSquares","updatedStatistics","switchPlayer","finish","updatedField","vertexIndex","getVertexIndex","addVertex","makeConnectionsBetweenSiblingSquares","getClosestSquaresInfo","column","siblingVertexIndex","addEdge","DEFAULT_MODAL_STATE","isShown","winner","Game","useState","isPlaying","setIsPlaying","setField","setCurrentPlayer","setStatistics","winnerModal","setWinnerModal","handleShowModal","handleCloseModal","handleStartGame","gameField","handleFinishGame","onStartGame","show","onHide","SquaresRow","square","StartScreen","setFieldSize","inputError","setInputError","handleChange","event","value","target","isValid","width","height","src","SquareExample","alt","FormControl","type","onChange","min","max","disabled","WinnerModal","props","Modal","Header","closeButton","Title","Body","Footer","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b7dd6a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayingScreen__field\":\"PlayingScreen_PlayingScreen__field__1q0Ti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__387Ds\",\"Square_state_empty\":\"Square_Square_state_empty__1XW5P\",\"Square_player_first\":\"Square_Square_player_first__lQSu4\",\"Square_player_second\":\"Square_Square_player_second__BoADq\"};","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport { Button, Row, Col } from 'react-bootstrap';\nimport classNames from 'classnames/bind';\n\nimport { Field, Player, Statistics } from 'src/Squares';\nimport { SquaresRow } from 'src/components';\nimport classes from './PlayingScreen.module.scss';\n\ninterface Props {\n  player: Player;\n  makeMove: (rowIndex: number, columnIndex: number) => void;\n  field: Field;\n  onFinishGame: () => void;\n  statistics: Statistics;\n}\n\nconst PlayingScreen: React.FC<Props> = ({\n  player, makeMove, field, onFinishGame, statistics,\n}) => {\n  const cx = classNames.bind(classes);\n  const firstPlayerWinningSquares = statistics[1];\n  const secondPlayerWinningSquares = statistics[2];\n\n  return (\n    <Row className={cx('PlayingScreen', 'py-5')}>\n      <Col className=\"d-flex flex-column align-items-center\">\n        <Row className=\"mb-3\">\n          <Col>\n            <h4>{`Current player: ${player}`}</h4>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} className={cx('PlayingScreen__field')}>\n            {field.map((squaresRow, rowIndex) => (\n              <SquaresRow\n                // It's okay to use index here as a key\n                // because the amount of items will never change\n                // eslint-disable-next-line react/no-array-index-key\n                key={rowIndex}\n                row={squaresRow}\n                rowIndex={rowIndex}\n                onSelectSquare={makeMove}\n              />\n            ))}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <p className=\"mt-2 mb-0\">\n              <span className=\"font-weight-bold\">First player: </span>\n              {firstPlayerWinningSquares}\n            </p>\n\n            <p className=\"mb-0\">\n              <span className=\"font-weight-bold\">Second player: </span>\n              {secondPlayerWinningSquares}\n            </p>\n          </Col>\n        </Row>\n\n        <Button className=\"mt-3\" onClick={onFinishGame}>Finish</Button>\n      </Col>\n    </Row>\n  );\n};\n\nexport { PlayingScreen };\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { useCallback } from 'react';\nimport classNames from 'classnames/bind';\n\nimport { Square as SquareType } from 'src/Squares';\nimport classes from './Square.module.scss';\n\nexport type OnSelectSquare = (rowIndex: number, columnIndex: number) => void;\n\ninterface Props {\n  player: SquareType;\n  rowIndex: number;\n  columnIndex: number;\n  onSelectSquare: OnSelectSquare;\n}\n\nconst Square: React.FC<Props> = ({\n  player, rowIndex, columnIndex, onSelectSquare,\n}) => {\n  const cx = classNames.bind(classes);\n\n  const handleSelectSquare = useCallback(() => {\n    const isSquareAlreadyTaken = Boolean(player);\n\n    if (isSquareAlreadyTaken) {\n      return;\n    }\n\n    onSelectSquare(rowIndex, columnIndex);\n  }, [player, rowIndex, columnIndex, onSelectSquare]);\n\n  const squareClasses = cx(\n    'Square',\n    {\n      Square_player_first: player === 1,\n      Square_player_second: player === 2,\n      Square_state_empty: !player,\n    },\n  );\n\n  return (\n    <div\n      className={squareClasses}\n      onClick={handleSelectSquare}\n    />\n  );\n};\n\nexport { Square };\n","type AdjacencyList = Record<string, number[]>;\n\nclass Graph {\n  adjacencyList: AdjacencyList = {};\n\n  addVertex(vertex: number): void {\n    if (!this.adjacencyList[vertex]) {\n      this.adjacencyList[vertex] = [];\n    }\n  }\n\n  addEdge(firstVertex: number, secondVertex: number): void {\n    const list = this.adjacencyList;\n\n    list[firstVertex].push(secondVertex);\n    list[secondVertex].push(firstVertex);\n  }\n\n  findLongestPath = (): number => {\n    const list = this.adjacencyList;\n    const vertecies = Object.keys(list);\n    const visited: Record<string, boolean> = {};\n\n    let longestPath = 0;\n    let currentPathLength = 0;\n\n    const depthFirstSearch = (vertex: number) => {\n      const neighbors = list[vertex];\n      const hasNeighbors = neighbors.length > 0;\n\n      visited[vertex] = true;\n      currentPathLength += 1;\n\n      if (!hasNeighbors) {\n        return;\n      }\n\n      neighbors.forEach((neighbor) => {\n        if (!visited[neighbor]) {\n          depthFirstSearch(neighbor);\n        }\n      });\n    };\n\n    vertecies.forEach((vertex) => {\n      if (!visited[vertex]) {\n        depthFirstSearch(Number(vertex));\n      }\n\n      if (currentPathLength > longestPath) {\n        longestPath = currentPathLength;\n      }\n\n      currentPathLength = 0;\n    });\n\n    return longestPath;\n  }\n}\n\nexport { Graph };\n","/* eslint-disable unicorn/no-new-array */\nimport { Graph } from './Graph';\n\nexport type Player = 1 | 2 | null;\nexport type Square = Player;\nexport type Row = Square[];\nexport type Field = Row[];\nexport type Statistics = Record<Exclude<Player, null>, number>;\nexport type MakeMove = (rowIndex: number, columnIndex: number) => Field;\n\nconst GAME_HAS_NOT_STARTED = 'The game has not started yet';\nconst DEFAULT_STATISTICS = { 1: 0, 2: 0 };\n\nclass Squares {\n  field: Field = [];\n\n  private firstPlayerGraph: Graph | null = null;\n\n  private secondPlayerGraph: Graph | null = null;\n\n  private currentPlayerGraph: Graph | null = null;\n\n  currentPlayer: Player = null;\n\n  remainingNumberOfMoves = 0;\n\n  statistics: Statistics = DEFAULT_STATISTICS;\n\n  start = (fieldSize = 3): Field => {\n    this.firstPlayerGraph = new Graph();\n    this.secondPlayerGraph = new Graph();\n    this.currentPlayer = 1;\n    this.currentPlayerGraph = this.firstPlayerGraph;\n    this.remainingNumberOfMoves = fieldSize * fieldSize;\n    this.statistics = DEFAULT_STATISTICS;\n\n    const createArrayFilledWithNulls = (): null[] => new Array(fieldSize).fill(null);\n    const rows = createArrayFilledWithNulls();\n\n    this.field = rows.map(() => createArrayFilledWithNulls());\n\n    return this.field;\n  }\n\n  makeMove: MakeMove = (rowIndex, columnIndex) => {\n    if (this.currentPlayer === null) {\n      throw new Error(GAME_HAS_NOT_STARTED);\n    }\n\n    if (this.remainingNumberOfMoves === 0) {\n      throw new Error('There are not any moves left');\n    }\n\n    this.selectSquare(rowIndex, columnIndex);\n    this.updateCurrentGraph(rowIndex, columnIndex);\n\n    const numberOfwinningSquares = this.currentPlayerGraph?.findLongestPath();\n    const updatedStatistics = { ...this.statistics, [this.currentPlayer]: numberOfwinningSquares };\n\n    this.statistics = updatedStatistics;\n    this.remainingNumberOfMoves -= 1;\n    this.switchPlayer();\n\n    return this.field;\n  }\n\n  finish = (): Player => {\n    if (this.firstPlayerGraph === null || this.secondPlayerGraph === null) {\n      throw new Error(GAME_HAS_NOT_STARTED);\n    }\n\n    const firstPlayerWinningSquares = this.statistics[1];\n    const secondPlayerWinningSquares = this.statistics[2];\n\n    if (firstPlayerWinningSquares === secondPlayerWinningSquares) {\n      return null;\n    }\n\n    return firstPlayerWinningSquares > secondPlayerWinningSquares ? 1 : 2;\n  }\n\n  private selectSquare = (rowIndex: number, columnIndex: number) => {\n    const updatedField = [...this.field];\n\n    updatedField[rowIndex][columnIndex] = this.currentPlayer;\n    this.field = updatedField;\n  };\n\n  private updateCurrentGraph = (rowIndex: number, columnIndex: number) => {\n    if (this.currentPlayerGraph === null) {\n      throw new Error(GAME_HAS_NOT_STARTED);\n    }\n\n    const vertexIndex = this.getVertexIndex(rowIndex, columnIndex);\n\n    this.currentPlayerGraph.addVertex(vertexIndex);\n    this.makeConnectionsBetweenSiblingSquares(rowIndex, columnIndex);\n  }\n\n  private getVertexIndex = (rowIndex: number, columnIndex: number) => {\n    const fieldSize = this.field.length;\n\n    return columnIndex + rowIndex * fieldSize;\n  }\n\n  private makeConnectionsBetweenSiblingSquares = (rowIndex: number, columnIndex: number) => {\n    if (this.currentPlayerGraph === null) {\n      throw new Error(GAME_HAS_NOT_STARTED);\n    }\n\n    const vertexIndex = this.getVertexIndex(rowIndex, columnIndex);\n    const closestSquaresInfo = this.getClosestSquaresInfo(rowIndex, columnIndex);\n\n    closestSquaresInfo.forEach(({ column, row }) => {\n      const square = this.field[row]?.[column];\n\n      if (square === this.currentPlayer) {\n        const fieldSize = this.field.length;\n        const siblingVertexIndex = column + row * fieldSize;\n\n        this.currentPlayerGraph!.addEdge(vertexIndex, siblingVertexIndex);\n      }\n    });\n  };\n\n  private getClosestSquaresInfo = (rowIndex: number, columnIndex: number) => {\n    const leftSquareInfo = { row: rowIndex, column: columnIndex - 1 };\n    const topSquareInfo = { row: rowIndex - 1, column: columnIndex };\n    const rightSquareInfo = { row: rowIndex, column: columnIndex + 1 };\n    const bottomSquareInfo = { row: rowIndex + 1, column: columnIndex };\n\n    return [leftSquareInfo, topSquareInfo, rightSquareInfo, bottomSquareInfo];\n  };\n\n  private switchPlayer = (): void => {\n    this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;\n    this.currentPlayerGraph = this.currentPlayer === 1 ? this.firstPlayerGraph : this.secondPlayerGraph;\n  }\n}\n\nexport { Squares };\n","import React, { useCallback, useState } from 'react';\n\nimport { Squares, Field } from 'src/Squares';\nimport { PlayingScreen, StartScreen, WinnerModal } from 'src/components';\n\nconst SquaresGame = new Squares();\n\nconst DEFAULT_MODAL_STATE = { isShown: false, winner: null };\n\nconst Game: React.FC = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [field, setField] = useState<Field>();\n  const [currentPlayer, setCurrentPlayer] = useState(SquaresGame.currentPlayer);\n  const [statistics, setStatistics] = useState(SquaresGame.statistics);\n  const [winnerModal, setWinnerModal] = useState(DEFAULT_MODAL_STATE);\n\n  const handleShowModal = useCallback((winner) => setWinnerModal({ isShown: true, winner }), []);\n  const handleCloseModal = useCallback(() => setWinnerModal(DEFAULT_MODAL_STATE), []);\n\n  const handleStartGame = useCallback((fieldSize = 3) => {\n    const gameField = SquaresGame.start(fieldSize);\n\n    setIsPlaying(true);\n    setCurrentPlayer(SquaresGame.currentPlayer);\n    setField(gameField);\n    setStatistics(SquaresGame.statistics);\n  }, []);\n\n  const handleFinishGame = useCallback(() => {\n    const winner = SquaresGame.finish();\n\n    handleShowModal(winner);\n    setIsPlaying(false);\n    setCurrentPlayer(SquaresGame.currentPlayer);\n  }, [handleShowModal]);\n\n  const makeMove = useCallback((rowIndex: number, columnIndex: number) => {\n    const updatedField = SquaresGame.makeMove(rowIndex, columnIndex);\n    const { remainingNumberOfMoves } = SquaresGame;\n\n    setField(updatedField);\n    setCurrentPlayer(SquaresGame.currentPlayer);\n    setStatistics(SquaresGame.statistics);\n\n    if (remainingNumberOfMoves === 0) {\n      handleFinishGame();\n    }\n  }, [handleFinishGame]);\n\n  return isPlaying && field\n    ? (\n      <PlayingScreen\n        player={currentPlayer}\n        field={field}\n        makeMove={makeMove}\n        onFinishGame={handleFinishGame}\n        statistics={statistics}\n      />\n    )\n    : (\n      <>\n        <StartScreen onStartGame={handleStartGame} />\n        <WinnerModal\n          show={winnerModal.isShown}\n          onHide={handleCloseModal}\n          winner={winnerModal.winner}\n        />\n      </>\n    );\n};\n\nexport { Game };\n","import React from 'react';\n\nimport { Row } from 'src/Squares';\nimport { Square, OnSelectSquare } from 'src/components/Square/Square';\n\ninterface Props {\n  row: Row;\n  rowIndex: number;\n  onSelectSquare: OnSelectSquare;\n}\n\nconst SquaresRow: React.FC<Props> = ({ row, rowIndex, onSelectSquare }) => (\n  <div>\n    {row.map((square, columnIndex) => (\n      <Square\n        // It's okay to use index here as a key\n        // because the amount of items will never change\n        // eslint-disable-next-line react/no-array-index-key\n        key={rowIndex + columnIndex}\n        player={square}\n        rowIndex={rowIndex}\n        columnIndex={columnIndex}\n        onSelectSquare={onSelectSquare}\n      />\n    ))}\n  </div>\n);\n\nexport { SquaresRow };\n","export default __webpack_public_path__ + \"static/media/squares_example.79acc20a.png\";","import React, { useCallback, useState } from 'react';\nimport {\n  Button, Row, Col, FormControl,\n} from 'react-bootstrap';\n\nimport SquareExample from './squares_example.png';\n\ninterface Props {\n  onStartGame: (fieldSize: number) => void;\n}\n\nconst MIN_FIELD_SIZE = 2;\nconst MAX_FIELD_SIZE = 8;\nconst DEFAULT_FIELD_SIZE = 3;\n\nconst StartScreen: React.FC<Props> = ({ onStartGame }) => {\n  const [fieldSize, setFieldSize] = useState(DEFAULT_FIELD_SIZE);\n  const [inputError, setInputError] = useState('');\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number(event.target.value);\n    const isValid = value >= MIN_FIELD_SIZE && value <= MAX_FIELD_SIZE;\n\n    setFieldSize(Number(value));\n\n    if (isValid && inputError) {\n      setInputError('');\n\n      return;\n    }\n\n    if (!isValid) {\n      setInputError(`The field size must be ${MIN_FIELD_SIZE} <= N <= ${MAX_FIELD_SIZE}`);\n    }\n  }, [inputError]);\n\n  const handleStartGame = useCallback(() => {\n    onStartGame(fieldSize);\n  }, [onStartGame, fieldSize]);\n\n  return (\n    <Row className=\"py-5\">\n      <Col>\n        <Row className=\"mb-3\">\n          <Col className=\"text-center\"><h1>Squares</h1></Col>\n        </Row>\n\n        <Row className=\"d-flex flex-column align-items-center\">\n          <Col xs={8}>\n\n            <Row>\n              <Col className=\"d-flex flex-column align-items-center mb-3\">\n                <img\n                  width=\"500px\"\n                  height=\"486px\"\n                  src={SquareExample}\n                  alt=\"Squares example\"\n                />\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <p>\n                  Squares is a simple two player game where a square shaped game board is split to N*N squares\n                  (2&nbsp;&#8804;&nbsp;N&nbsp;&#8804;&nbsp;8).\n                  <br />\n                  Each player marks a square on their turn and at the end,\n                  the player with the biggest directly connecting squares group wins.\n                </p>\n              </Col>\n            </Row>\n\n            <Row className=\"d-flex justify-content-center\">\n              <Col xs={12}>\n                You can set the board size N*N squares (2&nbsp;&#8804;&nbsp;N&nbsp;&#8804;&nbsp;8):\n              </Col>\n\n              <Col xs={4} className=\"my-3\">\n                <FormControl\n                  type=\"number\"\n                  value={fieldSize}\n                  onChange={handleChange}\n                  min={MIN_FIELD_SIZE}\n                  max={MAX_FIELD_SIZE}\n                />\n\n                {inputError && <small className=\"text-danger mt-2 d-inline-block\">{inputError}</small>}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col className=\"d-flex justify-content-center\">\n                <Button\n                  onClick={handleStartGame}\n                  disabled={Boolean(inputError)}\n                >\n                  Start game\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport { StartScreen };\n","import React from 'react';\nimport { Modal, Button, ModalProps } from 'react-bootstrap';\n\ninterface Props extends ModalProps {\n  winner: number | null;\n}\n\nconst WinnerModal: React.FC<Props> = ({\n  winner, show, onHide, ...props\n}) => (\n  <Modal onHide={onHide} show={show} {...props}>\n    <Modal.Header closeButton>\n      <Modal.Title>Congratulations!</Modal.Title>\n    </Modal.Header>\n\n    {show && (\n      <Modal.Body>\n        {winner === null\n          ? <p>It look like we have a draw!</p>\n          : <p>{`The winner is player ${winner}!`}</p>}\n      </Modal.Body>\n    )}\n\n    <Modal.Footer>\n      <Button onClick={onHide}>Ok</Button>\n    </Modal.Footer>\n  </Modal>\n);\n\nexport { WinnerModal };\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport { Game } from 'src/components';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <Container>\n      <Row>\n        <Col>\n          <Game />\n        </Col>\n      </Row>\n    </Container>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}